#!/bin/bash
set -euxo pipefail

# Install dependencies
sudo yum update -y
sudo yum install -y java-17-amazon-corretto-headless unzip tcpdump

# Create minecraft user and server directory
sudo useradd -m minecraft || true
sudo mkdir -p /opt/minecraft/server
cd /opt/minecraft/server
sudo chown -R minecraft:minecraft /opt/minecraft

# Download and install Forge 1.20.1 server
FORGE_INSTALLER_URL="sudo wget https://maven.minecraftforge.net/net/minecraftforge/forge/1.20.1-47.4.0/forge-1.20.1-47.4.0-installer.jar"
wget "$FORGE_INSTALLER_URL"
sudo -u minecraft java -jar forge-1.20.1-47.4.0-installer.jar --installServer

# Accept EULA
echo "eula=true" > eula.txt
sudo chown minecraft:minecraft eula.txt

# Create run.sh and user_jvm_args.txt for Forge
cat <<'EOF' > /opt/minecraft/server/run.sh
#!/usr/bin/env sh
# Forge requires a configured set of both JVM and program arguments.
# Add custom JVM arguments to the user_jvm_args.txt
# Add custom program arguments (like nogui) to this file in the next line before the "$@" or
# pass them to this script directly
java @user_jvm_args.txt @libraries/net/minecraftforge/forge/1.20.1-47.4.0/unix_args.txt "$@"
EOF
chmod +x /opt/minecraft/server/run.sh
sudo chown minecraft:minecraft /opt/minecraft/server/run.sh

# Create default user_jvm_args.txt
cat <<'EOF' > /opt/minecraft/server/user_jvm_args.txt
-Xmx7G
-Xms7G
EOF
chmod +x /opt/minecraft/server/user_jvm_args.txt
sudo chown minecraft:minecraft /opt/minecraft/server/user_jvm_args.txt

# Create start script using SSM RAM param
cat <<'EOF' > /opt/minecraft/server/start
#!/bin/bash
RAM=$(aws ssm get-parameter --name "/mc/ram" --query "Parameter.Value" --output text)
DEFAULT_RAM="6G"
echo "starting Forge server (modern run.sh style)..."

if [ $? -eq 0 ] && [[ "$RAM" =~ ^[0-9]+$ ]] && [ "$RAM" -gt 0 ]; then
    ram_size="${RAM}M"
else
    ram_size="$DEFAULT_RAM"
fi
echo "ram: $ram_size"

# Update JVM memory in user_jvm_args.txt
sed -i "s/-Xmx[^ ]*/-Xmx$ram_size/" user_jvm_args.txt
sed -i "s/-Xms[^ ]*/-Xms$ram_size/" user_jvm_args.txt

exec bash run.sh nogui
EOF
chmod +x /opt/minecraft/server/start
sudo chown minecraft:minecraft /opt/minecraft/server/start

# Create graceful stop script
cat <<'EOF' > /opt/minecraft/server/stop
#!/bin/bash
echo "/stop" > /run/minecraft.stdin
EOF
chmod +x /opt/minecraft/server/stop

# Create auto-start + shutdown monitor script
cat <<'EOF' > /opt/minecraft/server/monitor
#!/bin/bash
SSM_SHUTDOWNTIMER=$(aws ssm get-parameter --name "/mc/shutdowntimer" --query "Parameter.Value" --output text 2>/dev/null)
DEFAULT_SHUTDOWNTIMER=600
if [[ "$SSM_SHUTDOWNTIMER" =~ ^[0-9]+$ ]] && [ "$SSM_SHUTDOWNTIMER" -gt 0 ]; then
  SHUTDOWNTIMER=$SSM_SHUTDOWNTIMER
else
  SHUTDOWNTIMER=$DEFAULT_SHUTDOWNTIMER
fi

MONITOR_PORT="25565"
echo "Monitoring port $MONITOR_PORT..."
lastdisconnect=0
while true; do
  if systemctl is-active --quiet minecraft.service; then
    connections=$(ss -tn | grep ":$MONITOR_PORT" | grep -c ESTAB || true)
    if [ "$connections" -eq 0 ]; then
      if [ "$lastdisconnect" -eq 0 ]; then
        lastdisconnect=$(date +%s)
      else
        now=$(date +%s)
        elapsed=$((now - lastdisconnect))
        if [[ "$elapsed" =~ ^[0-9]+$ ]] && [ "$elapsed" -ge "$SHUTDOWNTIMER" ]; then
          echo "[monitor] Idle timeout reached. Shutting down."
          /opt/minecraft/server/stop
          break
        fi
      fi
    else
      lastdisconnect=0
    fi
  else
    if timeout 3 sudo tcpdump -c 1 -n -i any "tcp[tcpflags] & tcp-syn != 0 and port $MONITOR_PORT" 2>/dev/null; then
      echo "[monitor] Connection detected, starting server"
      sudo systemctl start minecraft.service
    fi
  fi
  sleep 2
done
EOF
chmod +x /opt/minecraft/server/monitor

# Systemd units: socket, service, monitor
cat <<'EOF' > /etc/systemd/system/minecraft.socket
[Unit]
PartOf=minecraft.service

[Socket]
ListenFIFO=/run/minecraft.stdin

[Install]
WantedBy=sockets.target
EOF

cat <<'EOF' > /etc/systemd/system/minecraft.service
[Unit]
Description=Minecraft Server on start up
After=network.target

[Service]
User=minecraft
WorkingDirectory=/opt/minecraft/server
ExecStart=/opt/minecraft/server/start
StandardInput=socket
Sockets=minecraft.socket
Restart=on-failure
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

cat <<'EOF' > /etc/systemd/system/monitor_minecraft.service
[Unit]
Description=Monitor Minecraft server for activity
After=network-online.target
Wants=network-online.target

[Service]
User=ec2-user
WorkingDirectory=/opt/minecraft/server
ExecStart=/opt/minecraft/server/monitor
Restart=on-failure
StandardInput=null

[Install]
WantedBy=multi-user.target
EOF

# Enable services
systemctl daemon-reexec
systemctl daemon-reload
systemctl enable minecraft.socket
systemctl enable minecraft.service
systemctl enable monitor_minecraft.service
systemctl start minecraft.socket
systemctl start monitor_minecraft.service
